import streamlit as st
import json
import os
import re
import unicodedata
import pandas as pd
from csv import Sniffer
import time
import traceback
import datetime as _dt

from config import SERPAPI_KEY
from utils import format_datetime, fetch_flights, extract_cheapest_flights
from agents import researcher, planner, hotel_restaurant_finder
from email_utils import send_itinerary_email

from dotenv import load_dotenv
load_dotenv()

# ============= Helpers: plain text (lo·∫°i Markdown) =============
_md_hdr_re = re.compile(r"^\s{0,3}#{1,6}\s+")
_md_tbl_re = re.compile(r"^\s*\|.*\|\s*$")
_md_code_fence_re = re.compile(r"^\s*```.*$")
_md_format_re = re.compile(r"(\*\*|\*|`|__|_)")

def to_plain_list(text: str) -> str:
    """B·ªè Markdown c∆° b·∫£n, ƒë·ªïi bullet th√†nh '- ' v√† lo·∫°i b·∫£ng/code block."""
    if not isinstance(text, str):
        return ""
    lines = []
    skip_code = False
    for raw in text.splitlines():
        line = raw.rstrip()

        # code fence on/off
        if _md_code_fence_re.match(line):
            skip_code = not skip_code
            continue
        if skip_code:
            continue

        # b·ªè header, b·∫£ng
        if _md_hdr_re.match(line) or _md_tbl_re.match(line):
            continue

        # ƒë·ªïi c√°c bullet markdown -> '- '
        line = re.sub(r"^\s*[-*+]\s+", "- ", line)
        # b·ªè s·ªë th·ª© t·ª± '1. ', '2) ' -> '- '
        line = re.sub(r"^\s*\d+[\.\)]\s+", "- ", line)

        # b·ªè inline bold/italic/code
        line = _md_format_re.sub("", line)

        # g·ªôp kho·∫£ng tr·∫Øng
        line = " ".join(line.split())

        if line:
            lines.append(line)
    # n·∫øu kh√¥ng c√≥ bullet n√†o, th√™m '- ' cho m·ªói d√≤ng ƒë·ªÉ lu√¥n c√≥ list
    if not any(l.strip().startswith("- ") for l in lines):
        lines = [f"- {l}" for l in lines if l]
    return "\n".join(lines)

# --- Bi·∫øn URL th√†nh link (HTML ho·∫∑c Markdown) ---
_URL_RE = re.compile(r'(https?://[^\s\]\)<>"]+)')

def linkify(text: str, html: bool = True) -> str:
    """T√¨m URL v√† bi·∫øn th√†nh th·∫ª <a> (ho·∫∑c Markdown) ƒë·ªÉ b·∫•m ƒë∆∞·ª£c."""
    if not isinstance(text, str) or not text.strip():
        return ""
    if html:
        return _URL_RE.sub(r'<a href="\1" target="_blank" rel="noopener noreferrer">\1</a>', text)
    else:
        return _URL_RE.sub(r'[\1](\1)', text)

# ============== Retry cho agent (ch·ªëng 429) ====================
def safe_agent_run(agent, prompt: str, retries: int = 3, base_wait: float = 4.0, component_name: str = "agent"):
    for i in range(retries):
        try:
            return agent.run(prompt, stream=False)
        except Exception as e:
            msg = str(e)
            is_rate = ("429" in msg) or ("Too Many Requests" in msg)
            wait = base_wait * (2 ** i) if is_rate else base_wait
            st.warning(f"‚ö†Ô∏è {component_name} ƒëang qu√° t·∫£i (th·ª≠ {i+1}/{retries}). S·∫Ω th·ª≠ l·∫°i sau {wait:.0f}s.")
            time.sleep(wait)
    st.error(f"‚ùå {component_name} l·ªói li√™n t·ª•c. D√πng n·ªôi dung t·∫°m th·ªùi ƒë·ªÉ kh√¥ng gi√°n ƒëo·∫°n.")
    class _Resp:
        def __init__(self, content): self.content = content
    fb = f"[FALLBACK - {component_name}] Model ƒëang qu√° t·∫£i ho·∫∑c gi·ªõi h·∫°n l∆∞·ª£t g·ªçi. Vui l√≤ng th·ª≠ l·∫°i sau."
    return _Resp(fb)

# ============== Flights fallback helpers =======================
def _fallback_pick_flights(flight_data, limit=6):
    if not isinstance(flight_data, dict):
        return []
    best = flight_data.get("best_flights") or []
    other = flight_data.get("other_flights") or []
    pool = (best + other)[:limit]

    normalized = []
    for f in pool:
        price = f.get("price") or f.get("total_price") or "N/A"
        duration = f.get("total_duration") or f.get("duration") or "N/A"
        flights_info = f.get("flights") or f.get("segments") or []
        airline_logo = f.get("airline_logo") or f.get("logo") or ""
        airline = f.get("airline") or (flights_info[0].get("airline") if flights_info else "Kh√¥ng x√°c ƒë·ªãnh")
        normalized.append({
            "airline_logo": airline_logo,
            "airline": airline,
            "price": price,
            "total_duration": duration,
            "flights": flights_info,
            "departure_token": f.get("departure_token", ""),
            "link": f.get("link"),
            "booking_options": f.get("booking_options"),
        })
    return normalized

# ============== City/Country (text) -> IATA t·ª´ CSV =============
def _normalize_text(s: str) -> str:
    if not isinstance(s, str):
        return ""
    s = s.strip().lower()
    s = unicodedata.normalize("NFD", s)
    s = "".join(c for c in s if unicodedata.category(c) != "Mn")
    s = re.sub(r"[^a-z0-9\s]", " ", s)
    s = " ".join(s.split())
    return s

CITY_ALIASES = {
    "tp hcm": "ho chi minh",
    "tphcm": "ho chi minh",
    "hcm": "ho chi minh",
    "sai gon": "ho chi minh",
    "saigon": "ho chi minh",
    "tp ho chi minh": "ho chi minh",
    "ha noi": "soc son",
    "hn": "soc son",
    "hanoi": "soc son",
}

COUNTRY_TO_ISO2 = {
    "vn": "vn", "viet nam": "vn", "vietnam": "vn",
    "fr": "fr", "france": "fr",
    "us": "us", "usa": "us", "united states": "us", "united states of america": "us",
    "uk": "gb", "gb": "gb", "great britain": "gb", "united kingdom": "gb",
    "jp": "jp", "japan": "jp",
    "kr": "kr", "south korea": "kr", "korea": "kr",
    "de": "de", "germany": "de",
    "it": "it", "italy": "it",
    "es": "es", "spain": "es",
    "au": "au", "australia": "au",
    "ca": "ca", "canada": "ca",
    "cn": "cn", "china": "cn",
    "sg": "sg", "singapore": "sg",
    "th": "th", "thailand": "th",
    "my": "my", "malaysia": "my",
    "id": "id", "indonesia": "id",
    "ph": "ph", "philippines": "ph",
    "tw": "tw", "taiwan": "tw",
    "hk": "hk", "hong kong": "hk",
    "ru": "ru", "russia": "ru",
    "br": "br", "brazil": "br",
    "mx": "mx", "mexico": "mx",
    "ae": "ae", "uae": "ae", "united arab emirates": "ae",
}

@st.cache_data(show_spinner=False)
def load_airports(csv_path: str = "airports.csv") -> pd.DataFrame:
    with open(csv_path, "r", encoding="utf-8", errors="ignore") as f:
        sample = f.read(4096)
        try:
            sep = Sniffer().sniff(sample).delimiter
        except Exception:
            sep = ","
    df = pd.read_csv(csv_path, sep=sep, dtype=str, encoding="utf-8", engine="python")

    required = ["code", "name", "country", "city", "state"]
    for c in required:
        if c not in df.columns:
            raise ValueError(f"Thi·∫øu c·ªôt {c} trong CSV (c·∫ßn: {', '.join(required)})")

    for c in ["code", "name", "country", "city", "state"]:
        df[c] = df[c].fillna("").astype(str).str.strip()

    df = df[df["code"].str.len() == 3].copy()

    df["n_city"]  = df["city"].map(_normalize_text)
    df["n_state"] = df["state"].map(_normalize_text)
    df["n_name"]  = df["name"].map(_normalize_text)
    df["n_ctry"]  = df["country"].map(_normalize_text)

    df["n_city_slim"]  = df["n_city"].str.replace(r"\bcity\b", "", regex=True).str.strip()
    df["n_state_slim"] = df["n_state"].str.replace(r"\bcity\b", "", regex=True).str.strip()

    return df[["code","name","country","city","state","n_city","n_state","n_name","n_ctry","n_city_slim","n_state_slim"]]

def _split_city_country(q: str):
    parts = [p.strip() for p in (q or "").split(",")]
    city_inp = _normalize_text(parts[0] if parts else "")
    ctry_inp = _normalize_text(parts[1] if len(parts) > 1 else "")

    city_inp = CITY_ALIASES.get(city_inp, city_inp)
    if ctry_inp:
        ctry_inp = COUNTRY_TO_ISO2.get(ctry_inp, ctry_inp)
    return city_inp, ctry_inp

def find_iata_options(query: str, airports_df: pd.DataFrame, max_preview: int = 40):
    city_q, ctry_q = _split_city_country(query)
    if not city_q:
        return [], pd.DataFrame()

    cand = airports_df[
        (airports_df["n_city"] == city_q) |
        (airports_df["n_city_slim"] == city_q) |
        (airports_df["n_state"] == city_q) |
        (airports_df["n_state_slim"] == city_q)
    ].copy()

    if cand.empty:
        cand = airports_df[
            airports_df["n_city"].str.contains(city_q, na=False) |
            airports_df["n_city_slim"].str.contains(city_q, na=False) |
            airports_df["n_state"].str.contains(city_q, na=False) |
            airports_df["n_state_slim"].str.contains(city_q, na=False) |
            airports_df["n_name"].str.contains(city_q, na=False)
        ].copy()

    if ctry_q and not cand.empty:
        cand = cand[cand["n_ctry"] == ctry_q]

    options, seen = [], set()
    for _, r in cand.iterrows():
        code = r["code"]
        if code in seen:
            continue
        seen.add(code)
        label_loc = r["city"] or r["state"]
        label = f"{code} ‚Äî {r['name']} ({label_loc}, {r['country']})"
        options.append((label, code))

    preview = cand.head(max_preview)[["code","name","city","state","country"]]
    return options, preview

# ============================ UI ================================
st.set_page_config(page_title="üåç Tr·ª£ l√Ω du l·ªãch AI", layout="wide")
st.markdown(
    """
    <style>
        .title { text-align:center; font-size:32px; font-weight:600; color:#2c3e50; }
        .subtitle { text-align:center; font-size:18px; color:#7f8c8d; }
        .stSlider > div { background-color:#f4f6f7; padding:10px; border-radius:8px; }
        .simple-card {
            border:1px solid #e1e1e1; border-radius:8px; padding:16px; background:#fff;
            box-shadow:0 2px 8px rgba(44,62,80,0.04); margin-bottom:16px;
        }
        .simple-btn {
            display:inline-block; padding:8px 18px; font-size:15px; font-weight:500;
            color:#fff; background-color:#2980b9; text-decoration:none; border-radius:5px; margin-top:8px;
        }
    </style>
    """,
    unsafe_allow_html=True,
)

st.markdown('<h1 class="title">Tr·ª£ l√Ω du l·ªãch AI</h1>', unsafe_allow_html=True)
st.markdown('<p class="subtitle">L√™n k·∫ø ho·∫°ch chuy·∫øn ƒëi m∆° ∆∞·ªõc c·ªßa b·∫°n v·ªõi AI. Nh·∫≠n ƒë·ªÅ xu·∫•t c√° nh√¢n h√≥a v·ªÅ chuy·∫øn bay, kh√°ch s·∫°n v√† ho·∫°t ƒë·ªông.</p>', unsafe_allow_html=True)

st.markdown("### B·∫°n mu·ªën ƒëi ƒë√¢u?")
st.markdown("Nh·∫≠p **t√™n th√†nh ph·ªë** (VD: ‚ÄúTP.HCM, VN‚Äù, ‚ÄúH√† N·ªôi, VN‚Äù, ‚ÄúParis, FR‚Äù, ‚ÄúNew York, US‚Äù). ·ª®ng d·ª•ng s·∫Ω t·ª± ƒë·ªông chuy·ªÉn th√†nh m√£ IATA.")

# T·∫£i d·ªØ li·ªáu s√¢n bay
airports_df = None
try:
    airports_df = load_airports("airports.csv")
    st.caption(f"üì¶ ƒê√£ n·∫°p {len(airports_df):,} s√¢n bay t·ª´ airports.csv")
except Exception as e:
    st.error("Kh√¥ng t·∫£i ƒë∆∞·ª£c d·ªØ li·ªáu s√¢n bay (airports.csv).")
    st.caption(f"Chi ti·∫øt: {e}")

source_city_input = st.text_input("Th√†nh ph·ªë kh·ªüi h√†nh:", "TP.HCM, VN")
destination_city_input = st.text_input("ƒêi·ªÉm ƒë·∫øn:", "Paris, FR")

src_options, src_preview = ([], pd.DataFrame())
dst_options, dst_preview = ([], pd.DataFrame())
if airports_df is not None:
    src_options, src_preview = find_iata_options(source_city_input, airports_df)
    dst_options, dst_preview = find_iata_options(destination_city_input, airports_df)

    if not src_options:
        st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s√¢n bay ph√π h·ª£p cho n∆°i kh·ªüi h√†nh.")
        with st.expander("Ch·∫©n ƒëo√°n kh·ªüi h√†nh"):
            st.write(src_preview if not src_preview.empty else "Kh√¥ng c√≥ b·∫£n ghi n√†o kh·ªõp.")
    if not dst_options:
        st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s√¢n bay ph√π h·ª£p cho ƒëi·ªÉm ƒë·∫øn.")
        with st.expander("Ch·∫©n ƒëo√°n ƒëi·ªÉm ƒë·∫øn"):
            st.write(dst_preview if not dst_preview.empty else "Kh√¥ng c√≥ b·∫£n ghi n√†o kh·ªõp.")

source = destination = None
if src_options:
    source_label = st.selectbox("Ch·ªçn s√¢n bay kh·ªüi h√†nh:", [o[0] for o in src_options], index=0, key="src_sel")
    source = dict(src_options)[source_label]
if dst_options:
    destination_label = st.selectbox("Ch·ªçn s√¢n bay ƒë·∫øn:", [o[0] for o in dst_options], index=0, key="dst_sel")
    destination = dict(dst_options)[destination_label]

st.markdown("### L√™n k·∫ø ho·∫°ch chuy·∫øn ƒëi")
num_days = st.slider("Th·ªùi gian chuy·∫øn ƒëi (ng√†y):", 1, 14, 5)
travel_theme = st.selectbox(
    "Ch·ªçn ch·ªß ƒë·ªÅ chuy·∫øn ƒëi:",
    ["Du l·ªãch c·∫∑p ƒë√¥i", "Du l·ªãch gia ƒë√¨nh", "Du l·ªãch kh√°m ph√°", "Du l·ªãch m·ªôt m√¨nh"]
)

st.markdown("---")
st.markdown(
    f"""
    <div style="text-align:center; padding:10px; background-color:#f4f6f7; border-radius:8px; margin-top:10px;">
        <h3 style="color:#2980b9;">Chuy·∫øn ƒëi {travel_theme} ƒë·∫øn {destination_city_input} s·∫Øp b·∫Øt ƒë·∫ßu!</h3>
        <p style="color:#7f8c8d;">H√£y c√πng t√¨m chuy·∫øn bay, n∆°i ·ªü v√† tr·∫£i nghi·ªám tuy·ªát v·ªùi cho h√†nh tr√¨nh c·ªßa b·∫°n.</p>
    </div>
    """,
    unsafe_allow_html=True,
)

activity_preferences = st.text_area(
    "B·∫°n th√≠ch ho·∫°t ƒë·ªông g√¨? (v√≠ d·ª•: ngh·ªâ d∆∞·ª°ng, kh√°m ph√° di t√≠ch l·ªãch s·ª≠, vui ch∆°i v·ªÅ ƒë√™m, phi√™u l∆∞u)",
    "Ngh·ªâ d∆∞·ª°ng, kh√°m ph√° di t√≠ch l·ªãch s·ª≠"
)

departure_date = st.date_input("Ng√†y kh·ªüi h√†nh")
return_date = st.date_input("Ng√†y tr·ªü v·ªÅ")

st.sidebar.title("Tr·ª£ l√Ω du l·ªãch")
st.sidebar.subheader("C√° nh√¢n h√≥a chuy·∫øn ƒëi")

budget = st.sidebar.number_input("Ng√¢n s√°ch mong mu·ªën (USD):", min_value=100.0, max_value=10000.0, step=50.0, value=1000.0)
flight_class = st.sidebar.radio("H·∫°ng v√© m√°y bay:", ["Ph·ªï th√¥ng", "Th∆∞∆°ng gia", "H·∫°ng nh·∫•t"])
hotel_rating = st.sidebar.selectbox("X·∫øp h·∫°ng kh√°ch s·∫°n mong mu·ªën:", ["B·∫•t k·ª≥", "3‚≠ê", "4‚≠ê", "5‚≠ê"])

st.sidebar.subheader("Danh s√°ch c·∫ßn mang theo")
packing_list = {
    "Qu·∫ßn √°o": True,
    "Gi√†y d√©p tho·∫£i m√°i": True,
    "K√≠nh r√¢m & kem ch·ªëng n·∫Øng": False,
    "S√°ch h∆∞·ªõng d·∫´n du l·ªãch": False,
    "Thu·ªëc & d·ª•ng c·ª• y t·∫ø": True
}
for item, checked in packing_list.items():
    st.sidebar.checkbox(item, value=checked)

st.sidebar.subheader("Th√¥ng tin c·∫ßn thi·∫øt")
visa_required = st.sidebar.checkbox("Ki·ªÉm tra y√™u c·∫ßu visa")
travel_insurance = st.sidebar.checkbox("Mua b·∫£o hi·ªÉm du l·ªãch")
currency_converter = st.sidebar.checkbox("T·ª∑ gi√° ngo·∫°i t·ªá")

params = {
    "engine": "google_flights",
    "departure_id": source,
    "arrival_id": destination,
    "outbound_date": str(departure_date),
    "return_date": str(return_date),
    "currency": "INR",  # ƒë·ªïi sang "USD"/"VND" n·∫øu mu·ªën
    "hl": "en",
    "api_key": SERPAPI_KEY
}

st.caption("üí° M·∫πo: C√≥ th·ªÉ nh·∫≠p ‚ÄúTh√†nh ph·ªë, Qu·ªëc gia‚Äù (VD: 'Ho Chi Minh, VN' / 'Paris, FR').")

btn_disabled = not (source and destination and airports_df is not None)

if st.button("T·∫°o k·∫ø ho·∫°ch du l·ªãch", disabled=btn_disabled):
    try:
        if not source or not destination:
            st.error("Vui l√≤ng ch·ªçn s√¢n bay kh·ªüi h√†nh v√† ƒë·∫øn h·ª£p l·ªá.")
            st.stop()

        with st.spinner("ƒêang t√¨m chuy·∫øn bay t·ªët nh·∫•t..."):
            data_main = fetch_flights(source, destination, departure_date, return_date)

            cheapest_flights = []
            try:
                cheapest_flights = extract_cheapest_flights(data_main) or []
            except Exception as e:
                st.warning(f"extract_cheapest_flights l·ªói: {e}")

            if not cheapest_flights:
                cheapest_flights = _fallback_pick_flights(data_main)

            if not cheapest_flights:
                try_dates = []
                try:
                    d0 = _dt.date.fromisoformat(str(departure_date))
                    r0 = _dt.date.fromisoformat(str(return_date))
                    try_dates = [
                        (d0, r0),
                        (d0 + _dt.timedelta(days=1), r0 + _dt.timedelta(days=1)),
                        (d0 - _dt.timedelta(days=1), r0 - _dt.timedelta(days=1)),
                    ]
                except Exception:
                    try_dates = []

                for d, r in try_dates[1:]:
                    data_try = fetch_flights(source, destination, d, r)
                    cf = []
                    try:
                        cf = extract_cheapest_flights(data_try) or []
                    except:
                        pass
                    if not cf:
                        cf = _fallback_pick_flights(data_try)
                    if cf:
                        st.info(f"Kh√¥ng th·∫•y k·∫øt qu·∫£ ng√†y ch√≠nh x√°c. ƒê√£ d√πng kho·∫£ng ng√†y: {d} ‚Üí {r}.")
                        cheapest_flights = cf
                        break

        if not cheapest_flights:
            st.warning("SerpAPI kh√¥ng tr·∫£ chuy·∫øn bay ph√π h·ª£p. Hi·ªÉn th·ªã ph·∫£n h·ªìi g·ªëc ƒë·ªÉ ki·ªÉm tra:")
            if isinstance(data_main, dict):
                st.json({k: data_main.get(k) for k in ["search_metadata", "error", "best_flights", "other_flights"]})

        # ---------- Research: TR·∫¢ V·ªÄ VƒÇN B·∫¢N THU·∫¶N ----------
        with st.spinner("ƒêang t√¨m ƒëi·ªÉm ƒë·∫øn & ho·∫°t ƒë·ªông n·ªïi b·∫≠t..."):
            research_prompt = f"""
B·∫°n l√† Travel Researcher.
ƒêi·ªÉm ƒë·∫øn: {destination_city_input}.
S·ªü th√≠ch: {activity_preferences}. Ch·ªß ƒë·ªÅ: {travel_theme}. S·ªë ng√†y: {num_days}.

H√ÉY TR·∫¢ V·ªÄ VƒÇN B·∫¢N THU·∫¶N (KH√îNG MARKDOWN, KH√îNG B·∫¢NG, KH√îNG TI√äU ƒê·ªÄ).
Ch·ªâ li·ªát k√™ theo d·∫°ng g·∫°ch ƒë·∫ßu d√≤ng, ng·∫Øn g·ªçn, m·ªói m·ª•c m·ªôt d√≤ng.

Bao g·ªìm:
- T·ªïng quan nhanh: kh√≠ h·∫≠u theo m√πa, l∆∞u √Ω an to√†n, tips di chuy·ªÉn n·ªôi ƒë√¥.
- Danh s√°ch 8‚Äì12 ho·∫°t ƒë·ªông ph√π h·ª£p v·ªõi "{travel_theme}" trong {num_days} ng√†y.
- M·ªói ho·∫°t ƒë·ªông: t√™n + m√¥ t·∫£ ng·∫Øn + khung gi·ªù g·ª£i √Ω (s√°ng/chi·ªÅu/t·ªëi) + chi ph√≠ ∆∞·ªõc t√≠nh n·∫øu c√≥.
Ng√¥n ng·ªØ: ti·∫øng Vi·ªát.
            """.strip()
            research_results = safe_agent_run(
                researcher, research_prompt, retries=3, base_wait=4.0,
                component_name="Nghi√™n c·ª©u ƒëi·ªÉm ƒë·∫øn"
            )

        # ---------- Hotels & Restaurants: VƒÇN B·∫¢N THU·∫¶N ----------
        with st.spinner("ƒêang t√¨m kh√°ch s·∫°n & nh√† h√†ng..."):
            hotel_restaurant_prompt = f"""
B·∫°n l√† Hotel & Restaurant Finder cho {destination_city_input}.
Ng√¢n s√°ch ~{int(budget)} USD. H·∫°ng kh√°ch s·∫°n mong mu·ªën: {hotel_rating}.
S·ªü th√≠ch: {activity_preferences}. H√†nh tr√¨nh: {num_days} ng√†y. Ch·ªß ƒë·ªÅ: {travel_theme}.

H√ÉY TR·∫¢ V·ªÄ VƒÇN B·∫¢N THU·∫¶N (KH√îNG MARKDOWN, KH√îNG B·∫¢NG).
Ch·ªâ li·ªát k√™ danh s√°ch g·∫°ch ƒë·∫ßu d√≤ng, m·ªói d√≤ng 1 m·ª•c ƒë·∫ßy ƒë·ªß th√¥ng tin.
Chia ph·∫ßn 1 v√† ph·∫ßn 2 cho d·ªÖ nh√¨n. 

Ph·∫ßn 1 - Kh√°ch s·∫°n (8‚Äì12 g·ª£i √Ω):
- T√™n kh√°ch s·∫°n | Khu v·ª±c g·∫ßn landmark | H·∫°ng sao | ƒêi·ªÉm ƒë√°nh gi√° | Gi√° ∆∞·ªõc t√≠nh/ƒë√™m (USD) | Ch√≠nh s√°ch hu·ª∑ | Link ƒë·∫∑t ph√≤ng (c√≥ ch∆∞a URL ƒë·∫ßy ƒë·ªß, ƒë∆∞a th·∫≥ng ƒë·∫øn website, c√≥ ch∆∞a https://)

Ph·∫ßn 2 - Nh√† h√†ng/qu√°n ƒÉn (10‚Äì15 g·ª£i √Ω, ƒë·ªß s√°ng/tr∆∞a/t·ªëi, nhi·ªÅu m·ª©c gi√°):
- T√™n | Lo·∫°i ·∫©m th·ª±c | Khu v·ª±c | M·ª©c gi√°/ng∆∞·ªùi (USD) | C√≥ ƒë·∫∑t b√†n kh√¥ng | Link Maps/Website Link ƒë·∫∑t ph√≤ng (c√≥ ch∆∞a URL ƒë·∫ßy ƒë·ªß, ƒë∆∞a th·∫≥ng ƒë·∫øn website, c√≥ ch∆∞a https://)

∆Øu ti√™n v·ªã tr√≠ thu·∫≠n ti·ªán v√† ch·ªó ƒë√°ng tin c·∫≠y. Ng√¥n ng·ªØ: ti·∫øng Vi·ªát.
            """.strip()
            hotel_restaurant_results = safe_agent_run(
                hotel_restaurant_finder, hotel_restaurant_prompt, retries=3, base_wait=4.0,
                component_name="Kh√°ch s·∫°n & Nh√† h√†ng"
            )

        with st.spinner("ƒêang t·∫°o l·ªãch tr√¨nh c√° nh√¢n h√≥a..."):
            planning_prompt = (
                f"D·ª±a tr√™n d·ªØ li·ªáu sau, h√£y t·∫°o l·ªãch tr√¨nh {num_days} ng√†y cho chuy·∫øn ƒëi {travel_theme.lower()} ƒë·∫øn {destination_city_input}. "
                f"Kh√°ch du l·ªãch th√≠ch: {activity_preferences}. Ng√¢n s√°ch: kho·∫£ng {int(budget)} USD. H·∫°ng v√©: {flight_class}. Kh√°ch s·∫°n: {hotel_rating}. "
                f"Visa: {visa_required}. B·∫£o hi·ªÉm: {travel_insurance}. Nghi√™n c·ª©u: {research_results.content}. "
                f"Chuy·∫øn bay: {json.dumps(cheapest_flights, ensure_ascii=False)}. Kh√°ch s·∫°n & Nh√† h√†ng: {hotel_restaurant_results.content}."
            )
            itinerary = safe_agent_run(
                planner, planning_prompt, retries=3, base_wait=4.0,
                component_name="L·∫≠p l·ªãch tr√¨nh"
            )

        # ========== Render ==========
        st.subheader("C√°c chuy·∫øn bay gi√° t·ªët nh·∫•t")
        if cheapest_flights:
            cols = st.columns(min(4, len(cheapest_flights)))
            for idx, flight in enumerate(cheapest_flights[:len(cols)]):
                with cols[idx]:
                    airline_logo = flight.get("airline_logo", "")
                    airline_name = flight.get("airline", "Kh√¥ng x√°c ƒë·ªãnh")
                    price = flight.get("price", "Kh√¥ng c√≥ th√¥ng tin")
                    total_duration = flight.get("total_duration", "N/A")

                    flights_info = flight.get("flights", [{}])
                    departure = flights_info[0].get("departure_airport", {}) if flights_info else {}
                    arrival = flights_info[-1].get("arrival_airport", {}) if flights_info else {}
                    airline_name = flights_info[0].get("airline", airline_name) if flights_info else airline_name

                    departure_time = format_datetime(departure.get("time", "N/A"))
                    arrival_time = format_datetime(arrival.get("time", "N/A"))

                    # --- Link ƒë·∫∑t v√©: ∆∞u ti√™n link tr·ª±c ti·∫øp n·∫øu c√≥, fallback Google Flights ---
                    booking_link = None
                    try:
                        booking_link = (
                            flight.get("link")
                            or (flight.get("booking_options") or [{}])[0].get("link")
                        )
                    except Exception:
                        booking_link = None

                    if not booking_link:
                        dep = str(departure_date)
                        ret = str(return_date)
                        booking_link = (
                            f"https://www.google.com/travel/flights?"
                            f"q={source}%20to%20{destination}%20{dep}%20{ret}"
                        )

                    if not isinstance(booking_link, str) or not booking_link.startswith(("http://", "https://")):
                        booking_link = "https://www.google.com/travel/flights"

                    st.markdown(
                        f"""
                        <div class="simple-card">
                            {'<img src="'+airline_logo+'" width="80" alt="Logo h√£ng bay" />' if airline_logo else ''}
                            <h4 style="margin: 8px 0; color:#2c3e50;">{airline_name}</h4>
                            <p><strong>Kh·ªüi h√†nh:</strong> {departure_time}</p>
                            <p><strong>ƒê·∫øn n∆°i:</strong> {arrival_time}</p>
                            <p><strong>Th·ªùi gian bay:</strong> {total_duration}</p>
                            <h3 style="color: #2980b9;">{price}</h3>
                            <a href="{booking_link}" target="_blank" class="simple-btn">ƒê·∫∑t v√© ngay</a>
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
        else:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu chuy·∫øn bay.")

        # Hai ph·∫ßn sau hi·ªÉn th·ªã VƒÇN B·∫¢N THU·∫¶N ƒë√£ linkify, d√πng Markdown ƒë·ªÉ c√≥ link b·∫•m ƒë∆∞·ª£c
        st.subheader("ƒêi·ªÉm ƒë·∫øn & ho·∫°t ƒë·ªông n·ªïi b·∫≠t ")
        research_plain = to_plain_list(research_results.content)
        st.markdown(linkify(research_plain, html=True).replace("\n", "  \n"), unsafe_allow_html=True)

        st.subheader("Kh√°ch s·∫°n & Nh√† h√†ng ")
        hotels_plain = to_plain_list(hotel_restaurant_results.content)
        st.markdown(linkify(hotels_plain, html=True).replace("\n", "  \n"), unsafe_allow_html=True)

        st.subheader("L·ªãch tr√¨nh c√° nh√¢n h√≥a c·ªßa b·∫°n")
        st.write(itinerary.content)

        st.success("K·∫ø ho·∫°ch du l·ªãch ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")

        st.session_state.itinerary = itinerary.content
        st.session_state.hotel_restaurant_results = hotel_restaurant_results.content

    except Exception:
        st.error("ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi t·∫°o k·∫ø ho·∫°ch.")
        with st.expander("Chi ti·∫øt l·ªói"):
            st.code("".join(traceback.format_exc()))

# --- G·ª≠i Email ---
if "itinerary" in st.session_state:
    st.markdown("---")
    st.subheader("üìß G·ª≠i l·ªãch tr√¨nh qua Email")
    with st.form("send_email_form"):
        receiver_email = st.text_input("üì® Email ng∆∞·ªùi nh·∫≠n", value="")
        subject = st.text_input("üìù Ti√™u ƒë·ªÅ Email", value="L·ªãch tr√¨nh du l·ªãch AI c·ªßa b·∫°n")
        st.markdown("**N·ªôi dung Email s·∫Ω bao g·ªìm l·ªãch tr√¨nh du l·ªãch v√† th√¥ng tin kh√°ch s·∫°n & nh√† h√†ng.**")

        itinerary_html = st.session_state.itinerary.replace('\n', '<br>')
        hotel_html_raw = st.session_state.hotel_restaurant_results
        # linkify ƒë·ªÉ URL trong email b·∫•m ƒë∆∞·ª£c
        hotel_html = linkify(to_plain_list(hotel_html_raw), html=True).replace('\n', '<br>')

        body = f"""
        <html>
        <head>
            <style>
                body {{ font-family: Arial, sans-serif; line-height: 1.6; }}
                h2 {{ color: #2c3e50; }}
                .section {{ margin-bottom: 20px; }}
                a {{ color: #2980b9; text-decoration: none; }}
                a:hover {{ text-decoration: underline; }}
            </style>
        </head>
        <body>
            <h2>üìå L·ªãch tr√¨nh du l·ªãch</h2>
            <div class="section">{itinerary_html}</div>
            <h2>üè® Kh√°ch s·∫°n & Nh√† h√†ng (vƒÉn b·∫£n thu·∫ßn)</h2>
            <div class="section">{hotel_html}</div>
        </body>
        </html>
        """

        submitted = st.form_submit_button("üì§ G·ª≠i Email")
        if submitted:
            sender_email = os.getenv("GMAIL_SENDER_EMAIL")
            if sender_email and receiver_email:
                success = send_itinerary_email(
                    sender_email=sender_email,
                    receiver_email=receiver_email,
                    subject=subject,
                    body=body
                )
                if success:
                    st.success("‚úÖ Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!")
                else:
                    st.error("‚ùå G·ª≠i email th·∫•t b·∫°i. Ki·ªÉm tra c·∫•u h√¨nh ho·∫∑c App Password.")
            else:
                st.warning("‚ö†Ô∏è Thi·∫øu th√¥ng tin ng∆∞·ªùi g·ª≠i ho·∫∑c ng∆∞·ªùi nh·∫≠n.")